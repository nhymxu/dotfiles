[core]
	excludesfile = ~/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX
	autocrlf = input

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[push]
	default = simple
	autoSetupRemote = true

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[http]

[color]
	ui = true

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

[color "diff"]
	meta = 11
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse

[commit]
	template = ~/dotfiles/git/gitmessage

[pager]
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[include]
    path = .gitconfig_local

[includeIf "gitdir/i:~/work/cpl/"]
	path = ~/.gitconfig-work

[includeIf "gitdir/i:~/workspace/cpl/"]
	path = ~/.gitconfig-work

[alias]
	p = !git pull --ff-only
	fixup = !sh -c 'REV=$(git rev-parse $1) && git commit --fixup $@ && git rebase -i --autostash --autosquash $REV^' -
	cleanup = "!git branch --merged | grep -v \"\\*\\|master\\|main\\|develop\\|dev\" | xargs -n1 git branch -d"
	children = "!bash -c 'c=${1:-HEAD}; set -- $(git rev-list --all --not \"$c\"^@ --children | grep $(git rev-parse \"$c\") ); shift; echo $1' -"
	lg = !git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit
	lg2 = !git log --graph --abbrev-commit --decorate --date=relative --all
	ignored = !git ls-files --others --i --exclude-standard
	graphgpg = log --graph --color --pretty=format:%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%C(blue)%x20(%ce)%x20%C(cyan)[gpg:%GK%x20%G?]%C(reset)%n%x20%s%n
	graph = log --graph --color --pretty=format:%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%C(blue)%x20(%ce)%x20%C(cyan)%C(reset)%n%x20%s%n
	last = log -1 --stat
	ll = log --stat --abbrev-commit
	fuck = "!f() { git reset --hard origin/$1; }; f"
	nah = "!git reset --hard && git clean -df"
	stash-rename = "!_() { rev=$(git rev-parse $1) && git stash drop $1 || exit 1 ; git stash store -m \"$2\" $rev; }; _"
	prune = !git gc --prune=now --aggressive

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	# aliases = config --get-regexp alias
	aliases = "!f() { git config --global -l | grep alias | sort; }; f"

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Show the user email for the current repository.
	whoami = config user.email

	crumb = commit --allow-empty-message -nm ''

[gc]
	autoDetach = false

[credential]
	helper = store

[tag]
	sort = -version:refname

[branch]
	# Show most recently changed branches first.
	sort = -committerdate

[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 1

[init]
	defaultBranch = main

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

	# Use diff style which includes merge base
	conflictStyle = zdiff3

[diff]
	# Detect copies as well as renames.
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C
